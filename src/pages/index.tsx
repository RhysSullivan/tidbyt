/* eslint-disable jsx-a11y/alt-text */
/* eslint-disable @next/next/no-img-element */
import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import * as htmlToImage from 'html-to-image';
import { useEffect, useRef, useState } from "react";
import { ArrowPathIcon } from '@heroicons/react/24/solid'

async function CC() {
  return (await import('canvas-capture')).default;
}


const resizeBase64Image = (base64: string, width: number, height: number): Promise<string> => {
  // Create a canvas element
  const canvas = document.createElement('canvas') as HTMLCanvasElement;

  // Create an image element from the base64 string
  const image = new Image();
  image.src = base64;

  // Return a Promise that resolves when the image has loaded
  return new Promise((resolve, reject) => {
    image.onload = () => {
      canvas.width = width;
      canvas.height = height;


      // Draw the image to the canvas
      canvas.getContext('2d')!.drawImage(image, 0, 0, canvas.width, canvas.height);
      // Resolve the Promise with the resized image as a base64 string
      resolve(canvas.toDataURL());
    };

    image.onerror = reject;
  });
};

let canvas: HTMLCanvasElement | null = null;

const Home: NextPage = () => {
  const domEl = useRef(null);
  const [tidbytImage, setTidbytImage] = useState<string | null>(null);
  const [recordedImage, setRecordedImage] = useState<string | null>(null);
  const [recording, setRecording] = useState(false);
  const mutation = trpc.example.push.useMutation();


  const record = async () => {
    if (!recording) return
    if (!canvas) return
    const frame = await getImage();
    if (!frame) return;

    const image = new Image();
    image.src = frame;
    image.crossOrigin = 'anonymous'
    image.onload = async () => {
      if (!canvas) {
        return
      }
      console.log('rendering to canvas')
      canvas.getContext('2d')!.drawImage(image, 0, 0, canvas.width, canvas.height);
      (await CC()).recordFrame();
    };
  };

  const getImage = async () => {
    if (!domEl.current) return;
    return htmlToImage.toPng(domEl.current);
  }

  const startRecording = async () => {
    canvas = document.createElement('canvas') as HTMLCanvasElement;
    canvas.width = 64;
    canvas.height = 32;

    (await CC()).init(canvas, {
      showRecDot: true,

    });
    setRecording(true);
    (await CC()).beginGIFRecord({
      fps: 60,
      onExport(blob, filename) {
        const reader = new FileReader();
        reader.readAsDataURL(blob);
        reader.onloadend = function () {
          const base64data = reader.result;
          console.log(base64data)
          setRecordedImage(base64data as string);
        }
      },
    });

  }

  const stopRecording = async () => {
    canvas = null;
    setRecording(false);
    (await CC()).stopRecord();
  }
  record();
  useEffect(() => {
    const syncPreview = async () => {
      const dataUrl = await getImage();
      setTidbytImage(dataUrl ?? null)
    }
    const interval = setInterval(() => syncPreview(), 100);
    return () => {
      clearInterval(interval);
    };
  }, []);


  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-[#15162c] text-slate-200">
        <div className="flex flex-col items-center justify-center flex-colspace-x-2">
          <div >
            <h2 className='text-4xl'>React</h2>
            <div className="border-solid border-red-500 border-2" style={{
              width: (64 * 6),
              height: (32 * 6),
              overflow: 'hidden',
            }}>
              <div ref={domEl} style={{
                width: '100%',
                height: '100%',
              }} >
                {/* <img src='./push.png' /> */}
                {/* <img src='./push_64_32.png' /> */}
                {/* <img src="https://www.answeroverflow.com/content/branding/meta_header.png" /> */}
                {/* <h1 className='text-white text-9xl' >Large Text</h1> */}
                <button type="button" className="bg-slate-800 w-full h-full" disabled>
                  <div className='flex items-center justify-center'>

                    <ArrowPathIcon className='animate-spin w-20' />
                    <span className='text-6xl'>

                      Processing...
                    </span>
                  </div>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div>
          <h2 className='text-4xl'>Tibyt</h2>
          <div className="border-solid border-red-500 border-2" style={{
            width: (64 * 6),
            height: (32 * 6),
            overflow: 'hidden',
          }}>
            {
              tidbytImage && <img src={tidbytImage} style={{
                width: '100%',
                imageRendering: "pixelated",
                maskSize: "contain",
                WebkitMaskSize: "contain",
                maskImage: "url(./mask.png)",
                WebkitMaskImage: "url(./mask.png)"
              }} />
            }
          </div>
        </div>


        <div>
          <h2 className='text-4xl'>Gif</h2>
          <div className="border-solid border-red-500 border-2" style={{
            width: (64 * 6),
            height: (32 * 6),
            overflow: 'hidden',
          }}>
            {
              recordedImage &&
              <img src={recordedImage} style={{
                width: '100%',
                imageRendering: "pixelated",
                maskSize: "contain",
                WebkitMaskSize: "contain",
                maskImage: "url(./mask.png)",
                WebkitMaskImage: "url(./mask.png)"
              }} />
            }
          </div>
        </div>

        <br />
        <div className='flex gap-11'>

          <button
            type="button"
            className="inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            onClick={

              async () => {
                if (!recording) {
                  startRecording();
                } else {
                  stopRecording();
                }
              }
            }

          >
            {!recording ? 'Start Recording' : 'Stop Recording'}

          </button>
          <button
            type="button"
            className="inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            onClick={
              async () => {
                const img = await getImage();
                const resized = await resizeBase64Image(img!, 64, 32)
                const sanitized = resized.replace(/^data:image\/(png|jpg);base64,/, "");

                mutation.mutate(sanitized);
              }
            }
          >
            Upload
          </button>
          <button
            type="button"
            className="inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            onClick={
              async () => {
                // convert recordedImage from a webm to a gif
                const sanitized = recordedImage!.split(',')[1]!;
                mutation.mutate(sanitized);
              }
            }
          >
            Upload Recording
          </button>
          {mutation.error && <p>Something went wrong! {mutation.error.message}</p>}
        </div>
      </main >
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
