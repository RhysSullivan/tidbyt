/* eslint-disable jsx-a11y/alt-text */
/* eslint-disable @next/next/no-img-element */
import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import Capture from "../components/capture";
import { useState } from "react";
import { CC } from "../utils/image";

const Home: NextPage = () => {
  const mutation = trpc.example.push.useMutation();
  const [tidbytImage, setTidbytImage] = useState<string | null>(null);
  const [canvas, setCanvas] = useState<HTMLCanvasElement | null>(null);
  const [isGif, setIsGif] = useState(false);
  const FPS = 10;
  const startRecording = async () => {
    const new_canvas = document.createElement('canvas') as HTMLCanvasElement;
    new_canvas.width = 64;
    new_canvas.height = 32;

    (await CC()).init(new_canvas, {
      showRecDot: true,

    });

    (await CC()).beginGIFRecord({
      fps: FPS,
      quality: 10,
      onExport(blob, filename) {
        const reader = new FileReader();
        reader.readAsDataURL(blob);
        reader.onloadend = function () {
          const base64data = reader.result;
          setTidbytImage(base64data as string);
        }
      },
    });
    setCanvas(new_canvas);

  }

  const stopRecording = async () => {
    (await CC()).stopRecord();
    setCanvas(null);
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-[#15162c] text-slate-200">
        <div className="flex flex-col items-center justify-center flex-colspace-x-2">
          <div >
            <h2 className='text-4xl'>React</h2>
            <div className="border-solid border-red-500 border-2" style={{
              width: (64 * 6),
              height: (32 * 6),
              overflow: 'hidden',
            }}>
              <Capture setTidbytImage={
                setTidbytImage
              }
                canvas={canvas}
                FPS={FPS}
                is_gif={isGif}
              />
            </div>
          </div>
        </div>
        <div>
          <h2 className='text-4xl'>Tibyt</h2>
          <div className="border-solid border-red-500 border-2" style={{
            width: (64 * 6),
            height: (32 * 6),
            overflow: 'hidden',
          }}>
            {
              tidbytImage && <img src={tidbytImage} style={{
                width: '100%',
                imageRendering: "pixelated",
                maskSize: "contain",
                WebkitMaskSize: "contain",
                maskImage: "url(./mask.png)",
                WebkitMaskImage: "url(./mask.png)"
              }} />
            }
          </div>
        </div>
        <br />
        <div className='flex gap-11'>
          {
            isGif &&

            <button className="inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" onClick={
              async () => {

                if (canvas) {
                  stopRecording();
                } else {
                  startRecording();
                }
              }
            }>
              {canvas ? 'Stop Recording' : 'Start Recording'}
            </button>
          }
          <label htmlFor="isGif" className="inline-flex items-center">
            <span className="ml-2 text-white">Gif</span>
          </label>
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-indigo-600 transition duration-150 ease-in-out"
            checked={isGif}
            onChange={(e) => setIsGif(e.target.checked)}
          />

          <button
            type="button"
            className="inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            onClick={
              async () => {
                // convert recordedImage from a webm to a gif
                const sanitized = tidbytImage!.split(',')[1]!;
                mutation.mutate(sanitized);
              }
            }
          >
            Upload
          </button>
          {mutation.error && <p>Something went wrong! {mutation.error.message}</p>}
        </div>
      </main >
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
